// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Yamasee
import CFNetwork
import CoreLocation
import CoreMotion
import Foundation
import MapKit
import Swift
import UIKit
import WebKit
@_exported import Yamasee
public struct Airport : Swift.Codable, Swift.Hashable {
  public var name: Swift.String
  public var icao: Swift.String
  public var lat: Swift.Float
  public var lng: Swift.Float
  public var iata: Swift.String
  public var size: Swift.Int
  public init()
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: Yamasee.Airport, b: Yamasee.Airport) -> Swift.Bool
}
public struct User : Swift.Decodable {
  public let id: Swift.String
  public let role: Swift.String
  public let userName: Swift.String?
  public let company: Swift.String?
  public let companyId: Swift.String
  public let firstName: Swift.String?
  public let lastName: Swift.String?
  public let email: Swift.String?
  public let routingEnabled: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
}
public enum ForgotPasswordError : Swift.Error {
  case userIdInvalid
  case general(error: Yamasee.GeneralError)
}
public enum TurbulenceSeverity : Swift.Int, Swift.Comparable, Swift.Equatable, Swift.Codable {
  case None
  case Light
  case LightModarate
  case Moderate
  case ModerateSevere
  case Severe
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension TurbulenceSeverity {
  public static func < (lhs: Yamasee.TurbulenceSeverity, rhs: Yamasee.TurbulenceSeverity) -> Swift.Bool
}
public struct TurbulenceItem {
  public let sev: Yamasee.TurbulenceSeverity
  public let bbox: [CoreLocation.CLLocationCoordinate2D]
}
public enum LoginError : Swift.Error {
  case userIdOrPasswordInvalid
  case ssoInvalid
  case ssoDisabledInPublic
  case weakPassword
  case general(error: Yamasee.GeneralError)
}
public enum PartnerLoginError : Swift.Error {
  case userIdOrCompanyIdInvalid
  case general(error: Yamasee.GeneralError)
}
public enum YamaseeLocationState {
  case good
  case dr
  case none
  public static func == (a: Yamasee.YamaseeLocationState, b: Yamasee.YamaseeLocationState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct YamaseeLocation {
  public var location: CoreLocation.CLLocation?
  public var state: Yamasee.YamaseeLocationState
}
public struct SessionTimeouts : Swift.Codable {
  public var session: Swift.Int
  public var idle: Swift.Int
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol YamaseeCoreDelegate : AnyObject {
  func newTurbulenceData(serverUpdateTime: Swift.Int)
  func newTrafficData(serverUpdateTime: Swift.Int)
  func deviceAngleStatusChanged(isInAngle: Swift.Bool)
  func turbulenceDetected(newTurbulence: Yamasee.TurbulenceItem)
  func loginStatus(isLoggedIn: Swift.Bool)
  func airborneStatus(isAirborne: Swift.Bool)
  func yamaseeNewLocationUpdate(location: Yamasee.YamaseeLocation)
  func ownTurbulenceChanged()
  func newWeatherData(serverUpdateTime: Swift.Int)
  func ownWeatherChanged()
  func newAirportsData()
}
@_hasMissingDesignatedInitializers public class YamaseeCore {
  public typealias RawAPIResponseDataBlock = (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void
  public static let shared: Yamasee.YamaseeCore
  weak public var delegate: Yamasee.YamaseeCoreDelegate?
  public func start(apiKey: Swift.String, baseUrl: Swift.String, dataUrl: Swift.String)
  public func partnerLogin(userId: Swift.String, companyId: Swift.String, completionHandler: @escaping (Swift.Bool, Yamasee.PartnerLoginError?) -> Swift.Void)
  public func userLogin(userId: Swift.String, password: Swift.String, completionHandler: @escaping (Swift.Bool, Yamasee.LoginError?) -> Swift.Void)
  public func ssoLogin(from: UIKit.UIViewController, airlinesCode: Swift.String? = nil, userId: Swift.String? = nil, onDisappear: @escaping () -> Swift.Void, completion: @escaping (Swift.Bool, Yamasee.LoginError?, Yamasee.SessionTimeouts?) -> Swift.Void)
  public func setOnSSORelogin(_ onSSORelogin: @escaping () -> Swift.Void)
  public func isLoggedIn() -> Swift.Bool
  public func logout()
  public var user: Yamasee.User? {
    get
  }
  public func setPrivateDistribution(_ privateDistribution: Swift.Bool)
  public func forgotPassword(userId: Swift.String, completionHandler: @escaping (Swift.Bool, Yamasee.ForgotPasswordError?) -> Swift.Void)
  public func isNewUser(userIdOrEmail: Swift.String, completionHandler: @escaping (Swift.Bool?, Swift.Error?) -> Swift.Void)
  public func setUserProfile(userIdOrEmail: Swift.String, password: Swift.String, completionHandler: @escaping (Swift.Bool, Yamasee.LoginError?) -> Swift.Void)
  public func isFreshUser(userIdOrEmail: Swift.String, completionHandler: @escaping (Swift.Bool?, Swift.Error?) -> Swift.Void)
  public func otpRequest(completionHandler: @escaping (Swift.Bool?, Swift.Error?) -> Swift.Void)
  public func otpValidate(otp: Swift.String, completionHandler: @escaping (Swift.Bool?, Swift.Error?) -> Swift.Void)
  public func setProfile(password: Swift.String, completionHandler: @escaping (Swift.Bool, Yamasee.LoginError?) -> Swift.Void)
  public func getTurbulenceGeoJson(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int) -> Swift.String
  public func getTurbulence(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int) -> [Yamasee.TurbulenceItem]
  public func getTrafficJson(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>) -> Swift.String
  public func getTraffic(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>) -> Swift.Array<Yamasee.Traffic>
  public func reportCB(lat: Swift.Double, lng: Swift.Double, alt: Foundation.Measurement<Foundation.UnitLength>)
  public func reportLightning(lat: Swift.Double, lng: Swift.Double, alt: Foundation.Measurement<Foundation.UnitLength>)
  public func reportShear(lat: Swift.Double, lng: Swift.Double, alt: Foundation.Measurement<Foundation.UnitLength>)
  public func reportIcing(lat: Swift.Double, lng: Swift.Double, alt: Foundation.Measurement<Foundation.UnitLength>)
  public func getWeatherByType(weatherType: Yamasee.WXType, altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int) -> Swift.String
  public func getWeatherByType(weatherType: Yamasee.WXType, altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int) -> [Yamasee.WeatherItem]
  public func getWeatherByTypes(weatherTypes: [Yamasee.WXType], altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int) -> [Yamasee.WeatherItem]
  public func getWeatherByTypes(weatherTypes: [Yamasee.WXType], altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int) -> Swift.String
  public func getOwnWeatherByType(weatherType: Yamasee.WXType, altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int) -> Swift.String
  public func getOwnWeatherByType(weatherType: Yamasee.WXType, altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int) -> [Yamasee.WeatherItem]
  public func getOwnWeatherByTypes(weatherTypes: [Yamasee.WXType], altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int) -> [Yamasee.WeatherItem]
  public func getOwnWeatherByTypes(weatherTypes: [Yamasee.WXType], altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int) -> Swift.String
  public func getOwnTurbulenceGeoJson(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int) -> Swift.String
  public func getOwnTurbulence(altRange: Swift.ClosedRange<Foundation.Measurement<Foundation.UnitLength>>, timeSpan: Swift.Int, zoomLevel: Swift.Int) -> [Yamasee.TurbulenceItem]
  public func getAlert(lat: Swift.Double, long: Swift.Double, altitude: Foundation.Measurement<Foundation.UnitLength>, heading: Foundation.Measurement<Foundation.UnitAngle>, timeSpan: Swift.Int, distance: Foundation.Measurement<Foundation.UnitLength> = .init(value: 100, unit: UnitLength.nauticalMiles), angleSpan: Foundation.Measurement<Foundation.UnitAngle> = .init(value: 15, unit: UnitAngle.degrees)) -> (maxTurboSevAtAlt: Yamasee.TurbulenceSeverity, maxTurboSevBelow: Yamasee.TurbulenceSeverity, maxTurboSevAbove: Yamasee.TurbulenceSeverity)
  public func getAlertTiles(lat: Swift.Double, long: Swift.Double, altitude: Foundation.Measurement<Foundation.UnitLength>, heading: Foundation.Measurement<Foundation.UnitAngle>, timeSpan: Swift.Int, distance: Foundation.Measurement<Foundation.UnitLength> = .init(value: 100, unit: UnitLength.nauticalMiles), angleSpan: Foundation.Measurement<Foundation.UnitAngle> = .init(value: 15, unit: UnitAngle.degrees)) -> (alertTilesAtAlt: [Yamasee.TurbulenceItem], alertTilesBelow: [Yamasee.TurbulenceItem], alertTilesAbove: [Yamasee.TurbulenceItem])
  public func getRouteAlerts(route: [CoreLocation.CLLocation], widthAround: Foundation.Measurement<Foundation.UnitLength> = .init(value: 0, unit: UnitLength.nauticalMiles), altitude: Foundation.Measurement<Foundation.UnitLength>, timeSpan: Swift.Int) -> (alertTilesAtAlt: [Yamasee.TurbulenceItem], alertTilesBelow: [Yamasee.TurbulenceItem], alertTilesAbove: [Yamasee.TurbulenceItem])
  public func getFlight(byId id: Swift.String, completion: @escaping Yamasee.YamaseeCore.RawAPIResponseDataBlock)
  public func getFlights(from: Foundation.Date, to: Foundation.Date, completion: @escaping Yamasee.YamaseeCore.RawAPIResponseDataBlock)
  public func getWaypoints(flightPlanId: Swift.String, completion: @escaping Yamasee.YamaseeCore.RawAPIResponseDataBlock)
  public func setAircraft(aircraft: Swift.String)
  public func getAircraft() -> Swift.String
  public func setFlightNumber(flightNumber: Swift.String)
  public func setAppForegroundStatus(inForeground: Swift.Bool)
  public func setAngle()
  public func isInPosition() -> Swift.Bool
  public func getAircraftTypes() -> [Yamasee.YamaseeAircraftType]
  public func getAirports() -> [Yamasee.Airport]
  public func getAirports() -> Swift.String
  public func getNearestAirport(toLocation: CoreLocation.CLLocation) -> Yamasee.Airport?
  public func contact(email: Swift.String, message: Swift.String, completionHandler: @escaping (Swift.Bool, Swift.Error?) -> Swift.Void)
  @objc deinit
}
extension YamaseeCoreDelegate {
  public func turbulenceDetected(newTurbulence: Yamasee.TurbulenceItem)
  public func ownTurbulenceChanged()
  public func loginStatus(isLoggedIn: Swift.Bool)
  public func airborneStatus(isAirborne: Swift.Bool)
  public func yamaseeNewLocationUpdate(location: Yamasee.YamaseeLocation)
  public func newWeatherData(serverUpdateTime: Swift.Int)
  public func ownWeatherChanged()
  public func newAirportsData()
}
extension YamaseeCore {
  public func setSimulatorMode(isLocationSimulatorOn: Swift.Bool)
  public func stopSimulationNoDR()
  public func simulatedLocation(location: CoreLocation.CLLocation)
  public func setPushSimulatedEnabled(_ enabled: Swift.Bool)
}
extension YamaseeCore {
  public func setLogger(isOn: Swift.Bool, isSymbol: Swift.Bool = false, errorOn: Swift.Bool = false, infoOn: Swift.Bool = false, warningOn: Swift.Bool = false, networkOn: Swift.Bool = false, onLog: ((Swift.String) -> Swift.Void)?)
}
public struct YamaseeAircraftType {
  public var aircraft: Swift.String
  public var description: Swift.String
}
public enum GeneralError : Swift.Error {
  case internetConnectionAppearsOffline
  case tooManyRequests
  case apiKeyInvalid
  case other(error: Swift.Error?)
}
public enum WXType : Swift.String, Swift.Codable {
  case cb
  case lightning
  case icing
  case shear
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
public struct WeatherItem {
  public let type: Yamasee.WXType
  public let location: [CoreLocation.CLLocationCoordinate2D]
  public let center: CoreLocation.CLLocationCoordinate2D
}
public struct Traffic : Swift.Encodable {
  public var lat: Swift.Double
  public var lng: Swift.Double
  public var alt: Swift.Double
  public var hdg: Swift.Double
  public var ts: Swift.Int
  public var uuid: Swift.String
  public var airplane: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
}
extension Traffic : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension Yamasee.TurbulenceSeverity : Swift.Hashable {}
extension Yamasee.TurbulenceSeverity : Swift.RawRepresentable {}
extension Yamasee.YamaseeLocationState : Swift.Equatable {}
extension Yamasee.YamaseeLocationState : Swift.Hashable {}
extension Yamasee.WXType : Swift.Equatable {}
extension Yamasee.WXType : Swift.Hashable {}
extension Yamasee.WXType : Swift.RawRepresentable {}
